import type { SearchClient } from '../types';
export declare class LocalSearchIndexClient implements SearchClient {
    protected searchIndex: any;
    constructor(searchIndex: any);
    put(docs: any[]): Promise<any>;
    del(ids: string[]): Promise<any>;
    query(query: string, options: {
        cursor?: string;
        limit?: number;
    } | undefined): Promise<{
        results: any[];
        total: number;
        nextCursor: string | null;
        prevCursor: string | null;
    }>;
}
declare type TinaCloudSearchIndexerClientOptions = {
    apiUrl: string;
    branch: string;
    indexerToken: string;
    stopwordLanguages?: string[];
};
export declare class TinaCMSSearchIndexClient implements SearchClient {
    private memoryLevel;
    private searchIndex;
    private readonly apiUrl;
    private readonly branch;
    private readonly indexerToken;
    private readonly stopwordLanguages;
    constructor(options: TinaCloudSearchIndexerClientOptions);
    put(docs: any[]): Promise<void>;
    del(ids: string[]): Promise<void>;
    onStartIndexing(): Promise<void>;
    onFinishIndexing(): Promise<void>;
    getSearchIndex(): any;
    query(query: string, options: {
        cursor?: string;
        limit?: number;
    } | undefined): Promise<{
        results: any[];
        total: number;
        nextCursor: string | null;
        prevCursor: string | null;
    }>;
}
export {};
